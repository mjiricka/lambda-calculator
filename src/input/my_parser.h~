// Generated by Bisonc++ V2.7.0 on Thu, 27 Oct 2011 00:03:15 +0200

// EDITED BECAUSE DEFAULT VERSION IS EXTREMELY UNPRACTICAL

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "__parserbase.h"
// $insert scanner.h
#include "scanner.h"
#include <sstream>


#undef Parser
class Parser: public ParserBase
{
    // $insert scannerobject
    Scanner * d_scanner;
        
    public:
        int parse();
			
		 term * parse(std::string input);
		term * result;
			

    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
};
			
inline term * Parser::parse(std::string input)
{
	std::stringstream ss;
	ss << input;
	d_scanner = new Scanner(ss);

	int i = parse();

	delete d_scanner;

	if( i != 0 ) return NULL;
	else return result;
}

inline void Parser::error(char const *msg)
{
    std::cerr << msg << '\n';
}

// $insert lex
inline int Parser::lex()
{
    return d_scanner->yylex();
}

// $insert print
inline void Parser::print()
{}

#endif
